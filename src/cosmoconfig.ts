export type Primary = number

export interface CosmoConfig {
    isAllowedMark(code : number) : boolean
    isLetter(primary : Primary) : boolean
    isSeparator(primary : Primary) : boolean
    isSymbol(primary : Primary) : boolean
    isPrimary(primary : Primary) : boolean
    letterNormalform(primary : Primary) : readonly Primary[]
    symbolNormalform(primary : Primary) : readonly Primary[]
    separatorNormalform : Primary
    mustStartWithLetter : boolean
}

export const ALLOWED_MARKS = new Set([
    0x0300,
    0x0301,
    0x0302,
    0x0303,
    0x0304,
    0x0305,
    0x0306,
    0x0307,
    0x0308,
    0x0309,
    0x030A,
    0x030B,
    0x030C,
    0x030F,
    0x0311,
    0x0313,
    0x0314,
    0x031B,
    0x0323,
    0x0324,
    0x0325,
    0x0326,
    0x0327,
    0x0328,
    0x032D,
    0x032E,
    0x0330,
    0x0331,
    0x0342,
    0x0345
]);

export const Letters = {

    LATIN_LOWERCASE : new Map([
        [0x0061, [0x0061]],
        [0x0062, [0x0062]],
        [0x0063, [0x0063]],
        [0x0064, [0x0064]],
        [0x0065, [0x0065]],
        [0x0066, [0x0066]],
        [0x0067, [0x0067]],
        [0x0068, [0x0068]],
        [0x0069, [0x0069]],
        [0x006A, [0x006A]],
        [0x006B, [0x006B]],
        [0x006C, [0x006C]],
        [0x006D, [0x006D]],
        [0x006E, [0x006E]],
        [0x006F, [0x006F]],
        [0x0070, [0x0070]],
        [0x0071, [0x0071]],
        [0x0072, [0x0072]],
        [0x0073, [0x0073]],
        [0x0074, [0x0074]],
        [0x0075, [0x0075]],
        [0x0076, [0x0076]],
        [0x0077, [0x0077]],
        [0x0078, [0x0078]],
        [0x0079, [0x0079]],
        [0x007A, [0x007A]]
    ]),
    
    LATIN_UPPERCASE : new Map([
        [0x0041, [0x0061]],
        [0x0042, [0x0062]],
        [0x0043, [0x0063]],
        [0x0044, [0x0064]],
        [0x0045, [0x0065]],
        [0x0046, [0x0066]],
        [0x0047, [0x0067]],
        [0x0048, [0x0068]],
        [0x0049, [0x0069]],
        [0x004A, [0x006A]],
        [0x004B, [0x006B]],
        [0x004C, [0x006C]],
        [0x004D, [0x006D]],
        [0x004E, [0x006E]],
        [0x004F, [0x006F]],
        [0x0050, [0x0070]],
        [0x0051, [0x0071]],
        [0x0052, [0x0072]],
        [0x0053, [0x0073]],
        [0x0054, [0x0074]],
        [0x0055, [0x0075]],
        [0x0056, [0x0076]],
        [0x0057, [0x0077]],
        [0x0058, [0x0078]],
        [0x0059, [0x0079]],
        [0x005A, [0x007A]]
    ]),
    
    LATIN_ADDITIONAL_1 : new Map([
        [0x00C6, [0x0061, 0x0065]],
        [0x00D8, [0x006F]],
        [0x00DF, [0x0073, 0x0073]],
        [0x00E6, [0x0061, 0x0065]],
        [0x00F8, [0x006F]],
        [0x0110, [0x0064]],
        [0x0111, [0x0064]],
        [0x0141, [0x006C]],
        [0x0142, [0x006C]],
        [0x0152, [0x006F, 0x0065]],
        [0x0153, [0x006F, 0x0065]],
        [0x01C4, [0x0064, 0x007A]],
        [0x01C5, [0x0064, 0x007A]],
        [0x01C6, [0x0064, 0x007A]],
        [0x01C8, [0x006C, 0x006A]],
        [0x01CB, [0x006E, 0x006A]],
        [0x01F1, [0x0064, 0x007A]],
        [0x01F2, [0x0064, 0x007A]],
        [0x01F3, [0x0064, 0x007A]]
    ]),
    
    LATIN_ADDITIONAL_2 : new Map([
        [0x1E9E, [0x0073, 0x0073]],
        [0xFB00, [0x0066, 0x0066]],
        [0xFB01, [0x0066, 0x0069]],
        [0xFB02, [0x0066, 0x006C]],
        [0xFB03, [0x0066, 0x0066, 0x0069]],
        [0xFB04, [0x0066, 0x0066, 0x006C]],
        [0xFB06, [0x0073, 0x0074]]
    ]),
    
    GREEK_UPPERCASE : new Map([
        [0x0391, [0x0061]],
        [0x0392, [0x0076]],
        [0x0393, [0x0067]],
        [0x0394, [0x0064]],
        [0x0395, [0x0065]],
        [0x0396, [0x007A]],
        [0x0397, [0x0069]],
        [0x0398, [0x0074, 0x0068]],
        [0x0399, [0x0069]],
        [0x039A, [0x006B]],
        [0x039B, [0x006C]],
        [0x039C, [0x006D]],
        [0x039D, [0x006E]],
        [0x039E, [0x0078]],
        [0x039F, [0x006F]],
        [0x03A0, [0x0070]],
        [0x03A1, [0x0072]],
        [0x03A3, [0x0073]],
        [0x03A4, [0x0074]],
        [0x03A5, [0x0079]],
        [0x03A6, [0x0066]],
        [0x03A7, [0x0063, 0x0068]],
        [0x03A8, [0x0070, 0x0073]],
        [0x03A9, [0x006F]]
    ]),
    
    GREEK_LOWERCASE : new Map([
        [0x03B1, [0x0061]],
        [0x03B2, [0x0076]],
        [0x03B3, [0x0067]],
        [0x03B4, [0x0064]],
        [0x03B5, [0x0065]],
        [0x03B6, [0x007A]],
        [0x03B7, [0x0069]],
        [0x03B8, [0x0074, 0x0068]],
        [0x03B9, [0x0069]],
        [0x03BA, [0x006B]],
        [0x03BB, [0x006C]],
        [0x03BC, [0x006D]],
        [0x03BD, [0x006E]],
        [0x03BE, [0x0078]],
        [0x03BF, [0x006F]],
        [0x03C0, [0x0070]],
        [0x03C1, [0x0072]],
        [0x03C2, [0x0073]],
        [0x03C3, [0x0073]],
        [0x03C4, [0x0074]],
        [0x03C5, [0x0079]],
        [0x03C6, [0x0066]],
        [0x03C7, [0x0063, 0x0068]],
        [0x03C8, [0x0070, 0x0073]],
        [0x03C9, [0x006F]]
    ]),
    
    CYRILLIC : new Map([
        [0x0404, [0x0079, 0x0065]],
        [0x0405, [0x007A]],
        [0x0406, [0x0069]],
        [0x0408, [0x006A]],
        [0x0409, [0x006C]],
        [0x040A, [0x006E]],
        [0x040F, [0x0064, 0x0068]],
        [0x0410, [0x0061]],
        [0x0411, [0x0062]],
        [0x0412, [0x0076]],
        [0x0413, [0x0067]],
        [0x0414, [0x0064]],
        [0x0415, [0x0065]],
        [0x0416, [0x007A, 0x0068]],
        [0x0417, [0x007A]],
        [0x0418, [0x0069]],
        [0x041A, [0x006B]],
        [0x041B, [0x006C]],
        [0x041C, [0x006D]],
        [0x041D, [0x006E]],
        [0x041E, [0x006F]],
        [0x041F, [0x0070]],
        [0x0420, [0x0072]],
        [0x0421, [0x0073]],
        [0x0422, [0x0074]],
        [0x0423, [0x0075]],
        [0x0424, [0x0066]],
        [0x0425, [0x0078]],
        [0x0426, [0x0063, 0x007A]],
        [0x0427, [0x0063, 0x0068]],
        [0x0428, [0x0073, 0x0068]],
        [0x0429, [0x0073, 0x0068, 0x0068]],
        [0x042A, []],
        [0x042B, [0x0079]],
        [0x042C, []],
        [0x042D, [0x0065]],
        [0x042E, [0x0079, 0x0075]],
        [0x042F, [0x0079, 0x0061]],
        [0x0430, [0x0061]],
        [0x0431, [0x0062]],
        [0x0432, [0x0076]],
        [0x0433, [0x0067]],
        [0x0434, [0x0064]],
        [0x0435, [0x0065]],
        [0x0436, [0x007A, 0x0068]],
        [0x0437, [0x007A]],
        [0x0438, [0x0069]],
        [0x043A, [0x006B]],
        [0x043B, [0x006C]],
        [0x043C, [0x006D]],
        [0x043D, [0x006E]],
        [0x043E, [0x006F]],
        [0x043F, [0x0070]],
        [0x0440, [0x0072]],
        [0x0441, [0x0073]],
        [0x0442, [0x0074]],
        [0x0443, [0x0075]],
        [0x0444, [0x0066]],
        [0x0445, [0x0078]],
        [0x0446, [0x0063, 0x007A]],
        [0x0447, [0x0063, 0x0068]],
        [0x0448, [0x0073, 0x0068]],
        [0x0449, [0x0073, 0x0068, 0x0068]],
        [0x044A, []],
        [0x044B, [0x0079]],
        [0x044C, []],
        [0x044D, [0x0065]],
        [0x044E, [0x0079, 0x0075]],
        [0x044F, [0x0079, 0x0061]],
        [0x0454, [0x0079, 0x0065]],
        [0x0455, [0x007A]],
        [0x0456, [0x0069]],
        [0x0458, [0x006A]],
        [0x0459, [0x006C]],
        [0x045A, [0x006E]],
        [0x045F, [0x0064, 0x0068]],
        [0x0490, [0x0067]],
        [0x0491, [0x0067]]
    ])
    
};

export const Symbols = {
    DIGITS : new Map([
        [0x0030, 0x0030],
        [0x0031, 0x0031],
        [0x0032, 0x0032],
        [0x0033, 0x0033],
        [0x0034, 0x0034],
        [0x0035, 0x0035],
        [0x0036, 0x0036],
        [0x0037, 0x0037],
        [0x0038, 0x0038],
        [0x0039, 0x0039]
    ]),
    
    LATIN_LOWERCASE : new Map([
        [0x0061, 0x0061],
        [0x0062, 0x0062],
        [0x0063, 0x0063],
        [0x0064, 0x0064],
        [0x0065, 0x0065],
        [0x0066, 0x0066],
        [0x0067, 0x0067],
        [0x0068, 0x0068],
        [0x0069, 0x0069],
        [0x006A, 0x006A],
        [0x006B, 0x006B],
        [0x006C, 0x006C],
        [0x006D, 0x006D],
        [0x006E, 0x006E],
        [0x006F, 0x006F],
        [0x0070, 0x0070],
        [0x0071, 0x0071],
        [0x0072, 0x0072],
        [0x0073, 0x0073],
        [0x0074, 0x0074],
        [0x0075, 0x0075],
        [0x0076, 0x0076],
        [0x0077, 0x0077],
        [0x0078, 0x0078],
        [0x0079, 0x0079],
        [0x007A, 0x007A]
    ]),
    
    LATIN_UPPERCASE : new Map([
        [0x0041, 0x0041],
        [0x0042, 0x0042],
        [0x0043, 0x0043],
        [0x0044, 0x0044],
        [0x0045, 0x0045],
        [0x0046, 0x0046],
        [0x0047, 0x0047],
        [0x0048, 0x0048],
        [0x0049, 0x0049],
        [0x004A, 0x004A],
        [0x004B, 0x004B],
        [0x004C, 0x004C],
        [0x004D, 0x004D],
        [0x004E, 0x004E],
        [0x004F, 0x004F],
        [0x0050, 0x0050],
        [0x0051, 0x0051],
        [0x0052, 0x0052],
        [0x0053, 0x0053],
        [0x0054, 0x0054],
        [0x0055, 0x0055],
        [0x0056, 0x0056],
        [0x0057, 0x0057],
        [0x0058, 0x0058],
        [0x0059, 0x0059],
        [0x005A, 0x005A]
    ]),
    
    GREEK_UPPERCASE : new Map([
        [0x0391, 0x0041],
        [0x0392, 0x0042],
        [0x0393, 0x0393],
        [0x0394, 0x0394],
        [0x0395, 0x0045],
        [0x0396, 0x005A],
        [0x0397, 0x0048],
        [0x0398, 0x0398],
        [0x0399, 0x0049],
        [0x039A, 0x004B],
        [0x039B, 0x039B],
        [0x039C, 0x004D],
        [0x039D, 0x004E],
        [0x039E, 0x039E],
        [0x039F, 0x004F],
        [0x03A0, 0x03A0],
        [0x03A1, 0x0050],
        [0x03A3, 0x03A3],
        [0x03A4, 0x0054],
        [0x03A5, 0x0059],
        [0x03A6, 0x03A6],
        [0x03A7, 0x0058],
        [0x03A8, 0x03A8],
        [0x03A9, 0x03A9]
    ]),
    
    GREEK_LOWERCASE : new Map([
        [0x03B1, 0x03B1],
        [0x03B2, 0x03B2],
        [0x03B3, 0x03B3],
        [0x03B4, 0x03B4],
        [0x03B5, 0x03B5],
        [0x03B6, 0x03B6],
        [0x03B7, 0x03B7],
        [0x03B8, 0x03B8],
        [0x03B9, 0x03B9],
        [0x03BA, 0x03BA],
        [0x03BB, 0x03BB],
        [0x03BC, 0x03BC],
        [0x03BD, 0x03BD],
        [0x03BE, 0x03BE],
        [0x03BF, 0x03BF],
        [0x03C0, 0x03C0],
        [0x03C1, 0x03C1],
        [0x03C2, 0x03C2],
        [0x03C3, 0x03C3],
        [0x03C4, 0x03C4],
        [0x03C5, 0x03C5],
        [0x03C6, 0x03C6],
        [0x03C7, 0x03C7],
        [0x03C8, 0x03C8],
        [0x03C9, 0x03C9]
    ]),
    
    CYRILLIC : new Map([
        [0x0404, 0x0404],
        [0x0405, 0x0053],
        [0x0406, 0x0049],
        [0x0408, 0x004A],
        [0x0409, 0x0409],
        [0x040A, 0x040A],
        [0x040F, 0x040F],
        [0x0410, 0x0041],
        [0x0411, 0x0411],
        [0x0412, 0x0042],
        [0x0413, 0x0393],
        [0x0414, 0x0414],
        [0x0415, 0x0045],
        [0x0416, 0x0416],
        [0x0417, 0x0417],
        [0x0418, 0x0418],
        [0x041A, 0x004B],
        [0x041B, 0x041B],
        [0x041C, 0x004D],
        [0x041D, 0x0048],
        [0x041E, 0x004F],
        [0x041F, 0x03A0],
        [0x0420, 0x0050],
        [0x0421, 0x0043],
        [0x0422, 0x0054],
        [0x0423, 0x0079],
        [0x0424, 0x0424],
        [0x0425, 0x0058],
        [0x0426, 0x0426],
        [0x0427, 0x0427],
        [0x0428, 0x0428],
        [0x042D, 0x042D],
        [0x042E, 0x042E],
        [0x042F, 0x042F],
        [0x0430, 0x0061],
        [0x0431, 0x0431],
        [0x0432, 0x0042],
        [0x0433, 0x0393],
        [0x0434, 0x0414],
        [0x0435, 0x0065],
        [0x0436, 0x0416],
        [0x0437, 0x0417],
        [0x0438, 0x0418],
        [0x043A, 0x004B],
        [0x043B, 0x041B],
        [0x043C, 0x004D],
        [0x043D, 0x0048],
        [0x043E, 0x006F],
        [0x043F, 0x03A0],
        [0x0440, 0x0070],
        [0x0441, 0x0063],
        [0x0442, 0x0054],
        [0x0443, 0x0079],
        [0x0444, 0x0424],
        [0x0445, 0x0078],
        [0x0446, 0x0426],
        [0x0447, 0x0427],
        [0x0448, 0x0428],
        [0x044D, 0x042D],
        [0x044E, 0x042E],
        [0x044F, 0x042F],
        [0x0454, 0x0404],
        [0x0455, 0x0073],
        [0x0456, 0x0069],
        [0x0458, 0x006A],
        [0x0459, 0x0409],
        [0x045A, 0x040A],
        [0x045F, 0x040F]
    ]),
    
    SCRIPT_UPPERCASE : new Map([
        [0x210B, 0x210B],
        [0x2110, 0x2110],
        [0x2112, 0x2112],
        [0x211B, 0x211B],
        [0x212C, 0x212C],
        [0x2130, 0x2130],
        [0x2131, 0x2131],
        [0x2133, 0x2133],
        [0x1D49C, 0x1D49C],
        [0x1D49E, 0x1D49E],
        [0x1D49F, 0x1D49F],
        [0x1D4A2, 0x1D4A2],
        [0x1D4A5, 0x1D4A5],
        [0x1D4A6, 0x1D4A6],
        [0x1D4A9, 0x1D4A9],
        [0x1D4AA, 0x1D4AA],
        [0x1D4AB, 0x1D4AB],
        [0x1D4AC, 0x1D4AC],
        [0x1D4AE, 0x1D4AE],
        [0x1D4AF, 0x1D4AF],
        [0x1D4B0, 0x1D4B0],
        [0x1D4B1, 0x1D4B1],
        [0x1D4B2, 0x1D4B2],
        [0x1D4B3, 0x1D4B3],
        [0x1D4B4, 0x1D4B4],
        [0x1D4B5, 0x1D4B5]
    ]),
    
    SCRIPT_LOWERCASE : new Map([
        [0x210A, 0x210A],
        [0x212F, 0x212F],
        [0x2134, 0x2134],
        [0x1D4B6, 0x1D4B6],
        [0x1D4B7, 0x1D4B7],
        [0x1D4B8, 0x1D4B8],
        [0x1D4B9, 0x1D4B9],
        [0x1D4BB, 0x1D4BB],
        [0x1D4BD, 0x1D4BD],
        [0x1D4BE, 0x1D4BE],
        [0x1D4BF, 0x1D4BF],
        [0x1D4C0, 0x1D4C0],
        [0x1D4C1, 0x1D4C1],
        [0x1D4C2, 0x1D4C2],
        [0x1D4C3, 0x1D4C3],
        [0x1D4C5, 0x1D4C5],
        [0x1D4C6, 0x1D4C6],
        [0x1D4C7, 0x1D4C7],
        [0x1D4C8, 0x1D4C8],
        [0x1D4C9, 0x1D4C9],
        [0x1D4CA, 0x1D4CA],
        [0x1D4CB, 0x1D4CB],
        [0x1D4CC, 0x1D4CC],
        [0x1D4CD, 0x1D4CD],
        [0x1D4CE, 0x1D4CE],
        [0x1D4CF, 0x1D4CF]
    ]),
    
    FRAKTUR_UPPERCASE : new Map([
        [0x210C, 0x210C],
        [0x2111, 0x2111],
        [0x211C, 0x211C],
        [0x2128, 0x2128],
        [0x212D, 0x212D],
        [0x1D504, 0x1D504],
        [0x1D505, 0x1D505],
        [0x1D507, 0x1D507],
        [0x1D508, 0x1D508],
        [0x1D509, 0x1D509],
        [0x1D50A, 0x1D50A],
        [0x1D50D, 0x1D50D],
        [0x1D50E, 0x1D50E],
        [0x1D50F, 0x1D50F],
        [0x1D510, 0x1D510],
        [0x1D511, 0x1D511],
        [0x1D512, 0x1D512],
        [0x1D513, 0x1D513],
        [0x1D514, 0x1D514],
        [0x1D516, 0x1D516],
        [0x1D517, 0x1D517],
        [0x1D518, 0x1D518],
        [0x1D519, 0x1D519],
        [0x1D51A, 0x1D51A],
        [0x1D51B, 0x1D51B],
        [0x1D51C, 0x1D51C]
    ]),
    
    FRAKTUR_LOWERCASE : new Map([
        [0x1D51E, 0x1D51E],
        [0x1D51F, 0x1D51F],
        [0x1D520, 0x1D520],
        [0x1D521, 0x1D521],
        [0x1D522, 0x1D522],
        [0x1D523, 0x1D523],
        [0x1D524, 0x1D524],
        [0x1D525, 0x1D525],
        [0x1D526, 0x1D526],
        [0x1D527, 0x1D527],
        [0x1D528, 0x1D528],
        [0x1D529, 0x1D529],
        [0x1D52A, 0x1D52A],
        [0x1D52B, 0x1D52B],
        [0x1D52C, 0x1D52C],
        [0x1D52D, 0x1D52D],
        [0x1D52E, 0x1D52E],
        [0x1D52F, 0x1D52F],
        [0x1D530, 0x1D530],
        [0x1D531, 0x1D531],
        [0x1D532, 0x1D532],
        [0x1D533, 0x1D533],
        [0x1D534, 0x1D534],
        [0x1D535, 0x1D535],
        [0x1D536, 0x1D536],
        [0x1D537, 0x1D537]
    ]),
    
    DOUBLE_STRUCK_UPPERCASE : new Map([
        [0x2102, 0x2102],
        [0x210D, 0x210D],
        [0x2115, 0x2115],
        [0x2119, 0x2119],
        [0x211A, 0x211A],
        [0x211D, 0x211D],
        [0x2124, 0x2124],
        [0x1D538, 0x1D538],
        [0x1D539, 0x1D539],
        [0x1D53B, 0x1D53B],
        [0x1D53C, 0x1D53C],
        [0x1D53D, 0x1D53D],
        [0x1D53E, 0x1D53E],
        [0x1D540, 0x1D540],
        [0x1D541, 0x1D541],
        [0x1D542, 0x1D542],
        [0x1D543, 0x1D543],
        [0x1D544, 0x1D544],
        [0x1D546, 0x1D546],
        [0x1D54A, 0x1D54A],
        [0x1D54B, 0x1D54B],
        [0x1D54C, 0x1D54C],
        [0x1D54D, 0x1D54D],
        [0x1D54E, 0x1D54E],
        [0x1D54F, 0x1D54F],
        [0x1D550, 0x1D550]
    ]),
    
    DOUBLE_STRUCK_LOWERCASE : new Map([
        [0x1D552, 0x1D552],
        [0x1D553, 0x1D553],
        [0x1D554, 0x1D554],
        [0x1D555, 0x1D555],
        [0x1D556, 0x1D556],
        [0x1D557, 0x1D557],
        [0x1D558, 0x1D558],
        [0x1D559, 0x1D559],
        [0x1D55A, 0x1D55A],
        [0x1D55B, 0x1D55B],
        [0x1D55C, 0x1D55C],
        [0x1D55D, 0x1D55D],
        [0x1D55E, 0x1D55E],
        [0x1D55F, 0x1D55F],
        [0x1D560, 0x1D560],
        [0x1D561, 0x1D561],
        [0x1D562, 0x1D562],
        [0x1D563, 0x1D563],
        [0x1D564, 0x1D564],
        [0x1D565, 0x1D565],
        [0x1D566, 0x1D566],
        [0x1D567, 0x1D567],
        [0x1D568, 0x1D568],
        [0x1D569, 0x1D569],
        [0x1D56A, 0x1D56A],
        [0x1D56B, 0x1D56B]
    ]),
    
    DOUBLE_STRUCK_DIGITS : new Map([
        [0x1D7D8, 0x1D7D8],
        [0x1D7D9, 0x1D7D9],
        [0x1D7DA, 0x1D7DA],
        [0x1D7DB, 0x1D7DB],
        [0x1D7DC, 0x1D7DC],
        [0x1D7DD, 0x1D7DD],
        [0x1D7DE, 0x1D7DE],
        [0x1D7DF, 0x1D7DF],
        [0x1D7E0, 0x1D7E0],
        [0x1D7E1, 0x1D7E1]
    ]),
    
    DOUBLE_STRUCK_GREEK : new Map([
        [0x213C, 0x213C],
        [0x213D, 0x213D],
        [0x213E, 0x213E],
        [0x213F, 0x213F],
        [0x2140, 0x2140]
    ]),
    
    HEBREW : new Map([
        [0x2135, 0x2135],
        [0x2136, 0x2136],
        [0x2137, 0x2137],
        [0x2138, 0x2138]
    ]),

    MATH : new Map([
        [0x002B, 0x002B],
        [0x002D, 0x002D],
        [0x003C, 0x003C],
        [0x003D, 0x003D],
        [0x003E, 0x003E], 
    ])
}

export const DIGITS : Set<Primary> = new Set([48, 49, 50, 51, 52, 53, 54, 55, 56, 57]);

export const LETTERS = new Map([
    ...Letters.LATIN_UPPERCASE, 
    ...Letters.LATIN_LOWERCASE,
    ...Letters.LATIN_ADDITIONAL_1,
    ...Letters.LATIN_ADDITIONAL_2,
    ...Letters.GREEK_UPPERCASE,
    ...Letters.GREEK_LOWERCASE,
    ...Letters.GREEK_LOWERCASE,
    ...Letters.CYRILLIC
]);

export const SYMBOLS : Map<Primary, Primary> = new Map([
    ...Symbols.DIGITS,
    ...Symbols.LATIN_LOWERCASE,
    ...Symbols.LATIN_UPPERCASE,
    ...Symbols.GREEK_LOWERCASE,
    ...Symbols.GREEK_UPPERCASE,
    ...Symbols.CYRILLIC,
    ...Symbols.SCRIPT_LOWERCASE,
    ...Symbols.SCRIPT_UPPERCASE,
    ...Symbols.FRAKTUR_LOWERCASE,
    ...Symbols.FRAKTUR_UPPERCASE,
    ...Symbols.DOUBLE_STRUCK_LOWERCASE,
    ...Symbols.DOUBLE_STRUCK_UPPERCASE,
    ...Symbols.DOUBLE_STRUCK_DIGITS,
    ...Symbols.DOUBLE_STRUCK_GREEK,
    ...Symbols.HEBREW,
    ...Symbols.MATH
]);

export const SEPARATORS : Primary[] = [0x2D];

export function CosmoConfig(
    AllowedMarks : Set<number>, 
    Separators : Primary[], 
    Letters : Map<Primary, Primary[]>,
    Symbols : Map<Primary, Primary>,
    mustStartWithLetter : boolean) : CosmoConfig 
{
    let AllPrimaries : Set<Primary> = new Set([
        ...Separators,
        ...Letters.keys(),
        ...Symbols.keys()
    ]);
    return {
        isAllowedMark(code: number): boolean {
            return AllowedMarks.has(code);
        },

        isLetter(primary: number): boolean {
            return Letters.has(primary);
        },

        isSeparator(primary: number): boolean {
            return Separators.indexOf(primary) >= 0;
        },

        isSymbol(primary: number): boolean {
            return Symbols.has(primary);
        },

        isPrimary(primary: number): boolean {
            return AllPrimaries.has(primary);
        },

        letterNormalform: function (primary: number): readonly number[] {
            return Letters.get(primary);
        },

        symbolNormalform: function (primary: number): readonly number[] 
        {
            let nf = Symbols.get(primary);
            if (nf === undefined) return undefined;
            return [nf];
        },

        separatorNormalform: Separators[0],

        mustStartWithLetter: mustStartWithLetter
    };
}

export const IdentifierCC  = CosmoConfig(ALLOWED_MARKS, SEPARATORS, LETTERS, SYMBOLS, false);

export const WordCC = CosmoConfig(ALLOWED_MARKS, SEPARATORS, LETTERS, Symbols.DIGITS, true);
    
    